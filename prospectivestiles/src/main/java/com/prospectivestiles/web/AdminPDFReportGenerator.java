package com.prospectivestiles.web;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfWriter;
import com.prospectivestiles.domain.Checklist;
import com.prospectivestiles.domain.Evaluation;
import com.prospectivestiles.service.ChecklistService;
import com.prospectivestiles.service.EvaluationService;
import com.prospectivestiles.service.UserEntityService;

@Controller
public class AdminPDFReportGenerator {
	
	@Autowired
	private UserEntityService userEntityService;
	
	@Inject
	private EvaluationService evaluationService;
	
	@Inject
	private ChecklistService checklistService;
	
	private static String FILE = "path-to-file";
	private static Font largeFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
			Font.BOLD);
	private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
			Font.NORMAL, BaseColor.RED);
	private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
			Font.BOLD);
	private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
			Font.BOLD);
	
	
	@RequestMapping(value = "/admin/report/{userEntityId}/evaluation", method = RequestMethod.GET)
	public void evaluationReport(@PathVariable("userEntityId") Long userEntityId,
			HttpServletResponse response, 
			HttpServletRequest request,
			Model model) {
		
		Evaluation eval = evaluationService.getEvaluationByUserEntityId(userEntityId);
		
		Document document = new Document();

		ByteArrayOutputStream out = new ByteArrayOutputStream();
		try {
			PdfWriter.getInstance(document, out);
			document.open();

			addMetaData(document);
//			addContent(document);
			
			Paragraph preface = new Paragraph();
			preface.add(new Paragraph(""));
			
			preface.add(new Paragraph("Admission Evaluation Report", largeFont));
			preface.add(new Paragraph(""));
			preface.add(new Paragraph(""));
			
			preface.add(new Paragraph("Report generated by: author on: " + new Date(), smallBold));
			preface.add(new Paragraph(""));
			
			preface.add(new Paragraph("Student Full Name: " + userEntityService.getUserEntity(userEntityId).getFullName()));
			preface.add(new Paragraph(""));
			preface.add(new Paragraph("admnOfficerReport: ", smallBold));
			preface.add(new Paragraph(""));
			
			preface.add(new Paragraph(eval.getAdmnOfficerReport()));
			preface.add(new Paragraph(""));
			preface.add(new Paragraph("studentQualification: ", smallBold));
			preface.add(new Paragraph(""));
			
			preface.add(new Paragraph(eval.getStudentQualification()));
			preface.add(new Paragraph(""));
			preface.add(new Paragraph("admissionOfficerName: ", smallBold));
			preface.add(new Paragraph(eval.getAdmissionOfficer().toString()));
			
			preface.add(new Paragraph(""));
			preface.add(new Paragraph("admitted on: " + eval.getDateAdmitted()));
			preface.add(new Paragraph(""));
			
			document.add(preface);

			document.close();
		} catch (DocumentException e) {
			e.printStackTrace();
		}
		try {
			FileCopyUtils.copy(out.toByteArray(), response.getOutputStream());
		} catch (IOException e) {
			e.printStackTrace();
		}
		response.setHeader("Content-Type", "application/pdf");
		/*set the header Content-disposition to inline to render pdf inline instead of prompting a download window*/
		response.setHeader("Content-Disposition", "inline;filename=Test.pdf");
		try {
			response.flushBuffer();
			response.getOutputStream().close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	@RequestMapping(value = "/admin/report/{userEntityId}/missingDocuments", method = RequestMethod.GET)
	public void missingDocumentsReport(@PathVariable("userEntityId") Long userEntityId,
			HttpServletResponse response, 
			HttpServletRequest request,
			Model model) {
		
		Checklist checklist = checklistService.getChecklistByUserEntityId(userEntityId);
		ArrayList<String> missingDocuments = new ArrayList<String>();
		
		/**
		 * if user has no checklist created, you can't generate missing documents report
		 */
		if (checklist != null) {
		
			/*if (checklist.isF1Visa() != true) {
				missingDocuments.add("F1Visa");
			}
			if (checklist.isBankStmt() != true) {
				missingDocuments.add("BankStmt");
			}
			if (checklist.isI20() != true) {
				missingDocuments.add("I20");
			}
			if (checklist.isPassport() != true) {
				missingDocuments.add("Passport");
			}
			if (checklist.isFinancialAffidavit() != true) {
				missingDocuments.add("FinancialAffidavit");
			}
			if (checklist.isApplicationFee() != true) {
				missingDocuments.add("ApplicationFee");
			}
			if (checklist.isTranscript() != true) {
				missingDocuments.add("Transcript");
			}
			if (checklist.isDiplome() != true) {
				missingDocuments.add("Diplome");
			}*/
			
			
			if (checklist.getF1Visa().equalsIgnoreCase("valid")) {
				missingDocuments.add("F1Visa");
			}
			if (checklist.getBankStmt().equalsIgnoreCase("valid")) {
				missingDocuments.add("BankStmt");
			}
			if (checklist.getI20().equalsIgnoreCase("valid")) {
				missingDocuments.add("I20");
			}
			if (checklist.getPassport().equalsIgnoreCase("valid")) {
				missingDocuments.add("Passport");
			}
			if (checklist.getFinancialAffidavit().equalsIgnoreCase("valid")) {
				missingDocuments.add("FinancialAffidavit");
			}
			if (checklist.getApplicationFee().equalsIgnoreCase("valid")) {
				missingDocuments.add("ApplicationFee");
			}
			if (checklist.getTranscript().equalsIgnoreCase("valid")) {
				missingDocuments.add("Transcript");
			}
			if (checklist.getDiplome().equalsIgnoreCase("valid")) {
				missingDocuments.add("Diplome");
			}
		
		}
		
		Document document = new Document();

		ByteArrayOutputStream out = new ByteArrayOutputStream();
		try {
			PdfWriter.getInstance(document, out);
			document.open();

			addMetaData(document);
//			addContent(document);
			
			Paragraph preface = new Paragraph();
			preface.add(new Paragraph(""));
			
			preface.add(new Paragraph("Missing Documents Report", largeFont));
			preface.add(new Paragraph(""));
			
			preface.add(new Paragraph("Report generated by: author on: " + new Date(), smallBold));
			preface.add(new Paragraph(""));
			
			
			preface.add(new Paragraph(""));
			preface.add(new Paragraph("Dear " + userEntityService.getUserEntity(userEntityId).getFullName() + ":"));
			preface.add(new Paragraph(""));
			preface.add(new Paragraph(""));
			
			preface.add(new Paragraph(""));
			preface.add(new Paragraph("The admission office is processing your application. The office has conducted initial review on your files to process you application but you have some missing documents. Please submit the missing documetns listed below. Upon completion of your required files the admission officer will evaluate your documents inorder to grant you admission."));
			preface.add(new Paragraph(""));
			preface.add(new Paragraph(""));
			preface.add(new Paragraph("The documents missing from your file are:"));
			preface.add(new Paragraph(""));
			preface.add(new Paragraph(""));
			
			List orderedList = new List(List.ORDERED);
		    
			for (int i = 0; i < missingDocuments.size(); i++) {
				orderedList.add(new ListItem(missingDocuments.get(i)));
			}
			
			
			document.add(preface);
			document.add(orderedList);

			document.close();
		} catch (DocumentException e) {
			e.printStackTrace();
		}
		try {
			FileCopyUtils.copy(out.toByteArray(), response.getOutputStream());
		} catch (IOException e) {
			e.printStackTrace();
		}
		response.setHeader("Content-Type", "application/pdf");
		/*set the header Content-disposition to inline to render pdf inline instead of prompting a download window*/
		response.setHeader("Content-Disposition", "inline;filename=Test.pdf");
		try {
			response.flushBuffer();
			response.getOutputStream().close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	@RequestMapping(value = "/admin/report/{userEntityId}/acceptanceLetter", method = RequestMethod.GET)
	public void acceptanceLetterReport(@PathVariable("userEntityId") Long userEntityId,
			HttpServletResponse response, 
			HttpServletRequest request,
			Model model) {
		
		Evaluation evaluation = evaluationService.getEvaluationByUserEntityId(userEntityId);
//		Map<String, Object> acceptanceLetterReport = new HashMap<String, Object>();
//		
//		if ((evaluation != null) && (evaluation.getStatus() != null)) {
//			if(evaluation.getStatus().equalsIgnoreCase("admitted")){
//				acceptanceLetterReport.put("status", "admitted");
//				acceptanceLetterReport.put("admissionOfficerName",evaluation.getAdmissionOfficer().getFullName());
//				acceptanceLetterReport.put("admittedBy",evaluation.getAdmittedBy().getFullName());
//				acceptanceLetterReport.put("dateAdmitted",evaluation.getDateAdmitted());
//			}
//		}
		
		
		Document document = new Document();

		ByteArrayOutputStream out = new ByteArrayOutputStream();
		try {
			PdfWriter.getInstance(document, out);
			document.open();

			addMetaData(document);
//			addContent(document);
			
			Paragraph preface = new Paragraph();
			preface.add(new Paragraph(""));
			
			preface.add(new Paragraph("Acceptance Letter", largeFont));
			preface.add(new Paragraph(""));
			
			preface.add(new Paragraph(""));
			preface.add(new Paragraph("Dear " + userEntityService.getUserEntity(userEntityId).getFullName() + ":"));
			preface.add(new Paragraph(""));
			preface.add(new Paragraph("Congratulations!!!"));
			preface.add(new Paragraph(""));
			preface.add(new Paragraph("The admission officer has approved your application for admission. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam imperdiet varius ligula vel interdum. Donec ut sapien nec eros pellentesque viverra vitae quis sem. Cras odio lorem, commodo mollis consequat nec, tempor vel sapien. Integer odio magna, luctus nec laoreet ut, rutrum vitae diam. Vivamus ullamcorper tortor in lectus accumsan, sed congue mi facilisis. Sed mi arcu, egestas vel turpis sed, feugiat laoreet nibh. Duis sit amet tincidunt urna. Nunc elementum elementum mauris quis feugiat. Phasellus pretium nunc sed ipsum adipiscing rhoncus. Vestibulum nec tortor sed ligula ornare lacinia. Nullam a turpis magna. Vivamus at interdum erat. Vestibulum bibendum lorem in feugiat ultricies. Fusce consequat eu risus sit amet vehicula. Maecenas auctor odio ipsum. Phasellus convallis est eu cursus lacinia."));
			preface.add(new Paragraph(""));
			
			preface.add(new Paragraph("admissionOfficerName: ", smallBold));
			preface.add(new Paragraph(evaluation.getAdmissionOfficer().getFullName()));
			
			preface.add(new Paragraph(""));
			preface.add(new Paragraph("admitted on: " + evaluation.getDateAdmitted()));
			preface.add(new Paragraph(""));
			
			
			document.add(preface);

			document.close();
		} catch (DocumentException e) {
			e.printStackTrace();
		}
		try {
			FileCopyUtils.copy(out.toByteArray(), response.getOutputStream());
		} catch (IOException e) {
			e.printStackTrace();
		}
		response.setHeader("Content-Type", "application/pdf");
		/*set the header Content-disposition to inline to render pdf inline instead of prompting a download window*/
		response.setHeader("Content-Disposition", "inline;filename=Test.pdf");
		try {
			response.flushBuffer();
			response.getOutputStream().close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/*
	 * create the PDF file in memory
	 * PDF not saved in server
	 */
	@RequestMapping("/admin/report/createPDF")
	public void createMemPDF(HttpServletResponse response, HttpServletRequest request) {
		
		Document document = new Document();

		ByteArrayOutputStream out = new ByteArrayOutputStream();
		try {
			PdfWriter.getInstance(document, out);
			document.open();

			addMetaData(document);
			addContent(document);

			document.close();
		} catch (DocumentException e) {
			e.printStackTrace();
		}
		try {
			FileCopyUtils.copy(out.toByteArray(), response.getOutputStream());
		} catch (IOException e) {
			e.printStackTrace();
		}
		response.setHeader("Content-Type", "application/pdf");
		/*set the header Content-disposition to inline to render pdf inline instead of prompting a download window*/
		response.setHeader("Content-Disposition", "inline;filename=Test.pdf");
		try {
			response.flushBuffer();
			response.getOutputStream().close();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}
	
	
	// create the pdf file and save it in the server
	// in the second method download the file saved in the server
	/*@RequestMapping("/admin/report/createPDF")
	public String createPDF() throws DocumentException {
		Document document = new Document();
		// document.setPageSize(PageSize.A4);

		String rootPath = System.getProperty("catalina.home");
		// System.out.println("rootPath:" + rootPath);
		File dir = new File(rootPath + File.separator + "tmpFiles");
		if (!dir.exists())
			dir.mkdirs();
		String fileName = randomAlphaNum();
		// Create the file on server
		File serverFile = new File(dir.getAbsolutePath() + File.separator
				+ fileName);
		System.out.println("serverFile.toString(): " + serverFile.toString());

		try {
			PdfWriter.getInstance(document, new FileOutputStream(serverFile));
			document.open();

			addMetaData(document);
			addContent(document);

			document.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (DocumentException e) {
			e.printStackTrace();
		}

		return "redirect:download/" + fileName;
		
	}*/
	
	/*@RequestMapping("/admin/report/download/{fileName}")
	public String downloadPDF(@PathVariable("fileName") String fileName, 
			HttpServletResponse response, HttpServletRequest request){
		String rootPath = System.getProperty("catalina.home");
		System.out.println("Downloading File");
		System.out.println("rootPath:" + rootPath);
		File dir = new File(rootPath + File.separator + "tmpFiles");
		response.setHeader("Content-Type", "application/pdf");
		response.setHeader("Content-Disposition", "inline;filename=Test.pdf");
		// copy file

		File serverFile = new File(dir.getAbsolutePath() + File.separator
				+ fileName);
		if (!serverFile.exists())
			return "welcome";
		FileInputStream in = null;
		try {
			in = new FileInputStream(serverFile);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			if (in != null)
				FileCopyUtils.copy(in, response.getOutputStream());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		serverFile.delete();
		return "welcome";
	}*/
	
	// iText allows to add metadata to the PDF which can be viewed in your Adobe
	  // Reader
	  // under File -> Properties
	private static void addMetaData(Document document){
		document.addTitle("First Title");
		document.addSubject("First Subject");
		document.addKeywords("First");
		document.addCreator("Daniel");
		document.addAuthor("Daniel");
	}
	
	private static void addContent(Document document) throws DocumentException{
		Paragraph preface = new Paragraph();
		preface.add(new Paragraph(""));
		
		preface.add(new Paragraph("Title of document", largeFont));
		preface.add(new Paragraph(""));
		
		preface.add(new Paragraph("Report generated by: author on: " + new Date(), smallBold));
		preface.add(new Paragraph(""));
		
		
		Anchor anchor = new Anchor("this is a link", largeFont);
		anchor.setName("LINK");
		anchor.setReference("http://www.google.com");
		
		// 2nd param is the chapter number
		Chapter chapter = new Chapter(new Paragraph(anchor), 1);
		Section section = chapter.addSection(new Paragraph("section"));
		section.add(new Paragraph("hello"));
		
		document.add(preface);
		document.add(section);
		
	}
	
	private String randomAlphaNum(){
		SecureRandom random = new SecureRandom();
		return new BigInteger(130, random).toString(32);
	}

}
