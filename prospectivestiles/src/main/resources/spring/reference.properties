# // #####################

#Deploying Prospectives in Heroku
#
#beans-data.xml
#Procfile
#system.properties
#pom.xml
#web.xm

## @TODO

#Country - the first item in country, i.e. ID=1 is the null country. this represents when a user does't select country. till i fix the null value in option.
#
#When using
#<form:select path="citizenship.id">
#<form:option value="" label="" />
#
#The page doesn\u2019t parse the null value option. a null value validation is not caught by the result binding result;
## END @TODO



# // #####################
# DOCUMENT MARGINS iText
# Document document = new Document(PageSize.A4, 36, 72, 108, 180);
# "The left margin of this page is 36pt (0.5 inch); " +
# "the right margin 72pt (1 inch); " +
# "the bottom margin 180pt (2.5 inch).")


# MAKING COLUMNS in iText
# // #####################
# final Phrase LOREM = new Phrase("In publishing and graphic design, lorem ipsum is a filler text "
# 		+ "commonly used to demonstrate the graphic elements of a document or visual presentation. "
# 		+ "improper Latin.");

# Paragraph paraRight = new Paragraph();
#
# PdfContentByte canvas = writer.getDirectContentUnder();
# ColumnText ct = new ColumnText(canvas);
# ct.setSimpleColumn(LOREM, 72, 750, 270, 500, 10, Element.ALIGN_JUSTIFIED);
# ct.go();
# ct.setSimpleColumn(LOREM, 342, 750, 540, 500, 10, Element.ALIGN_JUSTIFIED);
# ct.go();
# // #####################


# // ############# HeaderFooter ###############
		
# // step 1
# Document document = new Document(PageSize.A4, 36, 36, 54, 54);
# // step 2
# PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(RESULT));
# HeaderFooter event = new HeaderFooter();
# writer.setBoxSize("art", new Rectangle(36, 54, 559, 788));
# writer.setPageEvent(event);
# // step 3
# document.open();
# // step 4
# 	// ########### TableHeader #################
# // step 1
# Document document = new Document(PageSize.A4, 36, 36, 54, 36);
# // step 2
# PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(RESULT));
# TableHeader event = new TableHeader();
# writer.setPageEvent(event);
# // step 3
# document.open();
# // step 4


# 	// ########### HeaderFooter #################

# // add header and footer before document.open()
# /*HeaderFooter event = new HeaderFooter();
#     writer.setBoxSize("art", new Rectangle(36, 54, 559, 788));
#     writer.setPageEvent(event);*/
# 	// ############################

#          #######    CELL BORDERS - border on selected sides only   ###################
# Rectangle.BOTTOM=2,Rectangle.TOP=1,Rectangle.RIGHT=8,Rectangle.LEFT=4 
# so for right and bottom, use 
# cell.setBorder(10);
# or use
# cell.setBorder(Rectangle.RIGHT | Rectangle.BOTTOM);

# ##### Email is not unique. When user creates an account make sure the email doesn't exist.


# 	// ############################
# 	to CONVERT property value of type java.lang.STRING to required type DOUBLE
# 	// ############################

# In the StandardTest.score - when user enters invalid input, page crashed. To fix:

# Failed to convert property value of type java.lang.String to required type double
# http://stackoverflow.com/questions/10778822/failed-to-convert-property-value-of-type-java-lang-string-to-required-type-doubl

# in the AdminStandardTestController.java class inside the initBiner method initialize 
# NumberFormatUtil.registerDoubleFormat(binder);

# Create class NumberFormatUtil
#	public class NumberFormatUtil {
#	public static void registerDoubleFormat(WebDataBinder binder) {
#		binder.registerCustomEditor(Double.TYPE, new CustomerDoubleEditor());
#	}
#	private static class CustomerDoubleEditor extends PropertyEditorSupport {
#		public String getAsText() {
#			Double d = (Double) getValue();
#			return d.toString();
#		}
#		/**
#		 * IF the value passed is null or empty string set it as a 0d: returning 0 value of double type
#		 * If the value passed can be parsed to double parse it,
#		 * if not set the value as 0d: returning 0 value of double type
#		 * the 'score' filed in StandardTest entity has a validator @DecimalMin of value 1. 
#		 * so it will return err msg saying number should be greater than 1. 
#		 */
#		public void setAsText(String str) {
#			if (str == null || str.trim().equals("")) {
#				setValue(0d);
#			} else {
#				double val;
#				try {
#					val = Double.parseDouble(str);
#				} catch (NumberFormatException e) {
#					val = 0d;
#				}
#				setValue(val);
#			}
#		}
#	}
#}
# 	// ############################
# 	// ############################

# 	// ############################
				# To Solve JSON infinite recursion Stackoverflow  (with Spring and Jackson annotations)
				# http://stackoverflow.com/questions/9037955/spring-mvc-json-infinite-recursion
# 	// ############################

#Since Jackson 1.6 you can use two annotations to solve the infinite recursion problem without 
#ignoring the getters/setters during serialization: @JsonManagedReference and @JsonBackReference.
#
#For Jackson to work well, one of the two sides of the relationship should not be serialized, 
#in order to avoid the infite loop that causes your stackoverflow error.
#
#So, Jackson takes the forward part of the reference, your Set<BodyStat> bodyStats in Trainee class), 
#and converts it in a json-like storage format; this is the so-called marshalling process. 
#Then, Jackson looks for the back part of the reference (i.e. Trainee trainee in BodyStat class) 
#and leaves it as it is, not serializing it. This part of the relationship will be re-constructed 
#during the deserialization (unmarshalling) of the forward reference.


